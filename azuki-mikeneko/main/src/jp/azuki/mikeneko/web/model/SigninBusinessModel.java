package jp.azuki.mikeneko.web.model;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import jp.azuki.mikeneko.web.model.data.SigninModelData;import jp.azuki.web.view.JSPView;import jp.azuki.web.view.RedirectView;import jp.azuki.web.view.View;/** * このクラスは、サインインビジネスモデルの実装を行うための基底クラスです。 *  * @since 1.0.0 * @version 1.0.0 2013/07/09 * @author Kawakicchi */public abstract class SigninBusinessModel<SIGNIN_DATA extends SigninModelData> extends AbstractBusinessModel {	/**	 * コンストラクタ	 */	public SigninBusinessModel() {		super(SigninBusinessModel.class);	}	/**	 * コンストラクタ	 * 	 * @param aName 名前	 */	public SigninBusinessModel(final String aName) {		super(aName);	}	/**	 * コンストラクタ	 * 	 * @param aClass クラス	 */	public SigninBusinessModel(final Class<?> aClass) {		super(aClass);	}	@Override	protected final View doExecute(final HttpServletRequest aReq, final HttpServletResponse aRes) throws IllegalAccessException,			InstantiationException {		View view = null;		Class<SIGNIN_DATA> clazz = getSigninModelData();		SIGNIN_DATA data = clazz.newInstance();		String method = aReq.getMethod().toLowerCase();		if ("post".equals(method)) {			doSignin(data);			view = new RedirectView("/home.do");		} else {			doInit(data);			view = new JSPView("signin.jsp");		}		return view;	}	protected abstract Class<SIGNIN_DATA> getSigninModelData();	/**	 * 初期化処理を行う。	 * 	 * @param aSignin サインイン情報	 */	protected abstract void doInit(final SIGNIN_DATA aSignin);	/**	 * サインイン処理を行う。	 * 	 * @param aSignin サインイン情報	 */	protected abstract void doSignin(final SIGNIN_DATA aSignin);}