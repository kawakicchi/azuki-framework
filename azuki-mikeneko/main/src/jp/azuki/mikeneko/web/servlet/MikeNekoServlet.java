package jp.azuki.mikeneko.web.servlet;import java.io.IOException;import java.util.HashMap;import java.util.Map;import javax.servlet.ServletConfig;import javax.servlet.ServletException;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import jp.azuki.mikeneko.authentication.Authentication;import jp.azuki.mikeneko.authentication.AuthenticationSupport;import jp.azuki.persistence.context.ContextSupport;import jp.azuki.persistence.parameter.Parameter;import jp.azuki.persistence.parameter.ParameterSupport;import jp.azuki.persistence.proterty.Property;import jp.azuki.persistence.proterty.PropertyManager;import jp.azuki.persistence.proterty.PropertySupport;import jp.azuki.persistence.session.SessionSupport;import jp.azuki.persistence.store.Store;import jp.azuki.web.action.Action;import jp.azuki.web.action.annotation.ActionHttpServletPurser;import jp.azuki.web.action.urlmapper.UrlActionMapper;import jp.azuki.web.constant.WebServiceException;import jp.azuki.web.purser.DefaultHttpServletPurser;import jp.azuki.web.purser.HttpServletPurser;import jp.azuki.web.servlet.AbstractServlet;import jp.azuki.web.store.HttpSessionStore;import jp.azuki.web.view.View;public class MikeNekoServlet extends AbstractServlet {	/**	 * serialVersionUID	 */	private static final long serialVersionUID = -3145811643238326488L;	/**	 * Url action mapper class	 */	private UrlActionMapper mapper;	public MikeNekoServlet() {		super(MikeNekoServlet.class);	}	@Override	protected void doInitialize(ServletConfig aConfig) throws ServletException {		try {			String mapperClass = aConfig.getInitParameter("UrlActionMapper");			Class<?> clazz = Class.forName(mapperClass);			Object obj = clazz.newInstance();			if (obj instanceof UrlActionMapper) {				mapper = (UrlActionMapper) obj;			} else {				error("This class is unsupported UrlActionMappter.[" + mapperClass + "]");			}		} catch (ClassNotFoundException ex) {			throw new ServletException(ex);		} catch (IllegalAccessException ex) {			throw new ServletException(ex);		} catch (InstantiationException ex) {			throw new ServletException(ex);		}	}	@Override	protected void doDestroy() {		// TODO Auto-generated method stub	}	public void doGet(final HttpServletRequest aReq, final HttpServletResponse aRes) throws ServletException, IOException {		doTask(aReq, aRes);	}	public void doPost(final HttpServletRequest aReq, final HttpServletResponse aRes) throws ServletException, IOException {		doTask(aReq, aRes);	}	private void doTask(final HttpServletRequest aReq, final HttpServletResponse aRes) throws ServletException, IOException {		Action action = createAction(aReq, aRes);		if (null != action) {			AuthenticationSupport anAuth = action.getClass().getAnnotation(AuthenticationSupport.class);			if (null != anAuth) {				Class<? extends Authentication> clazz = anAuth.value();				try {					Authentication auth = clazz.newInstance();					// 認証					auth.authenticate();					// TODO ダメなら				} catch (IllegalAccessException ex) {					throw new ServletException(ex);				} catch (InstantiationException ex) {					throw new ServletException(ex);				}			}			Parameter parameter = null;			{				try {					Map<String, Object> params = new HashMap<String, Object>();					// purser					ActionHttpServletPurser aPurser = action.getClass().getAnnotation(ActionHttpServletPurser.class);					if (null != aPurser) {						Class<? extends HttpServletPurser>[] classes = aPurser.value();						for (Class<? extends HttpServletPurser> clazz : classes) {							HttpServletPurser purser = clazz.newInstance();							Map<String, Object> m = purser.purse(aReq, aRes);							params.putAll(m);						}					} else {						DefaultHttpServletPurser purser = new DefaultHttpServletPurser();						Map<String, Object> m = purser.purse(aReq, aRes);						params.putAll(m);					}					parameter = new Parameter(params);				} catch (InstantiationException ex) {					throw new ServletException(ex);				} catch (IllegalAccessException ex) {					throw new ServletException(ex);				}			}			Store<String, Object> session = new HttpSessionStore(aReq.getSession(true));			// ##### Action Support start #####			// Session support			if (action instanceof SessionSupport) {				((SessionSupport) action).setSession(session);			}			// Context support			if (action instanceof ContextSupport) {				((ContextSupport) action).setContext(getContext());			}			// Property support			if (action instanceof PropertySupport) {				Property property = PropertyManager.get(action.getClass());				if (null == property) {					property = PropertyManager.load(action.getClass(), getContext());				}				((PropertySupport) action).setProperty(property);			}			// Parameter support (request parameter)			if (action instanceof ParameterSupport) {				((ParameterSupport) action).setParameter(parameter);			}			// ##### Action Support end #####			try {				View view = action.action();				view.view(aReq, aRes);			} catch (WebServiceException ex) {				throw new ServletException(ex);			}		} else {			aRes.sendError(404);		}	}	private Action createAction(final HttpServletRequest aReq, final HttpServletResponse aRes) throws ServletException, IOException {		return mapper.mapping(aReq, aRes);	}}