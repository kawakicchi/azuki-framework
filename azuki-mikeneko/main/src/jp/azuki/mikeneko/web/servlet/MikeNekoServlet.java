package jp.azuki.mikeneko.web.servlet;import java.io.IOException;import javax.servlet.ServletConfig;import javax.servlet.ServletException;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import javax.servlet.http.HttpSession;import jp.azuki.core.util.UUIDUtility;import jp.azuki.mikeneko.MikeNeko;import jp.azuki.mikeneko.web.display.Display;import jp.azuki.mikeneko.web.model.BusinessModel;import jp.azuki.mikeneko.web.model.urlmapper.UrlModelMapper;import jp.azuki.mikeneko.web.session.MikeNekoUserSession;import jp.azuki.web.servlet.AbstractServlet;import jp.azuki.web.view.View;public class MikeNekoServlet extends AbstractServlet {	/**	 * serialVersionUID	 */	private static final long serialVersionUID = -3145811643238326488L;	/**	 * Url model mapper class	 */	private UrlModelMapper mapper;	/**	 * コンストラクタ	 */	public MikeNekoServlet() {		super(MikeNekoServlet.class);	}	@Override	protected void doInitialize(ServletConfig aConfig) throws ServletException {		try {			String mapperClass = aConfig.getInitParameter("UrlModelMapper");			Class<?> clazz = Class.forName(mapperClass);			Object obj = clazz.newInstance();			if (obj instanceof UrlModelMapper) {				mapper = (UrlModelMapper) obj;			} else {				error("This class is unsupported UrlMappter.[" + mapperClass + "]");			}		} catch (ClassNotFoundException ex) {			throw new ServletException(ex);		} catch (IllegalAccessException ex) {			throw new ServletException(ex);		} catch (InstantiationException ex) {			throw new ServletException(ex);		}	}	@Override	protected void doDestroy() {	}	public void doGet(final HttpServletRequest aReq, final HttpServletResponse aRes) throws ServletException, IOException {		doTask(aReq, aRes);	}	public void doPost(final HttpServletRequest aReq, final HttpServletResponse aRes) throws ServletException, IOException {		doTask(aReq, aRes);	}	protected void doTask(final HttpServletRequest aReq, final HttpServletResponse aRes) throws ServletException, IOException {		MikeNekoUserSession session = getSession(aReq, aRes);		String path = aReq.getServletPath();		if ("/back.do".equals(path)) {			doBack(aReq, aRes);		} else {			BusinessModel model = getModel(aReq, aRes);			View view = null;			if (null != model) {				view = model.execute(aReq, aRes);			}			if (null != view) {				String method = aReq.getMethod().toLowerCase();				if ("get".equals(method)) {					Display display = new Display(UUIDUtility.generate());					session.getDisplayStack().push(display);				}			}			if (null != view) {				view.view(aReq, aRes);			} else {				aRes.sendError(404);			}		}	}	private void doBack(final HttpServletRequest aReq, final HttpServletResponse aRes) throws ServletException, IOException {		MikeNekoUserSession session = getSession(aReq, aRes);		session.getDisplayStack().pop();	}	private BusinessModel getModel(final HttpServletRequest aReq, final HttpServletResponse aRes) {		return mapper.mapping(aReq, aRes);	}	private MikeNekoUserSession getSession(final HttpServletRequest aReq, final HttpServletResponse aRes) {		HttpSession session = aReq.getSession(true);		Object obj = session.getAttribute(MikeNeko.MIKENEKO_USER_SESSION_NAME);		if (null == obj) {			obj = new MikeNekoUserSession(null);			session.setAttribute(MikeNeko.MIKENEKO_USER_SESSION_NAME, obj);		}		return (MikeNekoUserSession) obj;	}}