package jp.azuki.job.job;import java.sql.Connection;import jp.azuki.business.logic.Logic;import jp.azuki.core.util.StringUtility;import jp.azuki.job.exception.JobServiceException;import jp.azuki.job.parameter.Parameter;import jp.azuki.job.result.JobResult;import jp.azuki.persistence.context.Context;import jp.azuki.persistence.context.ContextSupport;import jp.azuki.persistence.database.DatabaseConnectionSupport;import jp.azuki.persistence.proterty.Property;import jp.azuki.persistence.proterty.PropertySupport;import jp.azuki.persistence.session.SessionSupport;import jp.azuki.persistence.store.Store;/** * このクラスは、標準的な機能を実装したジョブクラスです。 *  * @author N.Kawakita *  */public abstract class StandardJob extends AbstractJob implements ContextSupport, PropertySupport, SessionSupport, DatabaseConnectionSupport {	/**	 * コンテキスト情報	 */	private Context context;	/**	 * プロパティ情報	 */	private Property property;	/**	 * セッション情報	 */	private Store<String, Object> session;	/**	 * コネクション情報	 */	private Connection connection;	/**	 * コンストラクタ	 */	public StandardJob() {		super();	}	/**	 * コンストラクタ	 * 	 * @param aName 名前	 */	public StandardJob(final String aName) {		super(aName);	}	/**	 * コンストラクタ	 * 	 * @param aClass クラス	 */	public StandardJob(final Class<?> aClass) {		super(aClass);	}	@Override	public final void setContext(final Context aContext) {		context = aContext;	}	/**	 * コンテキスト情報を取得する。	 * 	 * @return コンテキスト情報	 */	protected final Context getContext() {		return context;	}	@Override	public final void setProperty(final Property aProperty) {		property = aProperty;	}	/**	 * プロパティ情報を取得する。	 * 	 * @return プロパティ情報	 */	protected final Property getProperty() {		return property;	}	@Override	public final void setSession(final Store<String, Object> aSession) {		session = aSession;	}	/**	 * セッション情報を取得する。	 * 	 * @return セッション情報	 */	protected final Store<String, Object> getSession() {		return session;	}	/**	 * コネクション情報	 * 	 * @param aConnection	 */	public final void setConnection(final Connection aConnection) {	}	@Override	public void initialize() {		doInitialize();	}	@Override	public void destroy() {		doDestroy();	}	@Override	public JobResult execute(final Parameter aParameter) throws JobServiceException {		JobResult result = doExecute(aParameter);		return result;	}	protected final Logic getLogic(final String aName) {		return getLogic(StringUtility.EMPTY, aName);	}	protected final Logic getLogic(final String aNamespace, final String aName) {		Logic logic = null;		// TODO getLogic		return logic;	}}