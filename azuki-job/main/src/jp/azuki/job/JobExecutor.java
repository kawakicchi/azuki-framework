package jp.azuki.job;import java.io.IOException;import java.io.InputStream;import jp.azuki.core.log.LoggerFactory;import jp.azuki.core.util.StringUtility;import jp.azuki.job.commandline.CommandLineArgument;import jp.azuki.job.commandline.CommandLineArgumentPurser;import jp.azuki.job.commandline.StandardCommandLineArgumentPurser;import jp.azuki.job.context.JobContext;import jp.azuki.job.job.Job;import jp.azuki.job.parameter.Parameter;import jp.azuki.job.store.JobSessionStore;import jp.azuki.persistence.ConfigurationFormatException;import jp.azuki.persistence.context.Context;import jp.azuki.persistence.context.ContextSupport;import jp.azuki.persistence.proterty.Property;import jp.azuki.persistence.proterty.PropertyFile;import jp.azuki.persistence.proterty.PropertyManager;import jp.azuki.persistence.proterty.PropertySupport;import jp.azuki.persistence.session.SessionSupport;import jp.azuki.plugin.PluginManager;import jp.azuki.plugin.PluginServiceException;/** * このクラスは、ジョブの実行を行うクラスです。 *  * @since 1.0.0 * @version 1.0.0 2013/07/19 * @author Kawakicchi *  */public class JobExecutor {	/**	 * メイン関数	 * 	 * @param args 引数	 */	public static void main(final String[] args) {		CommandLineArgumentPurser purser = new StandardCommandLineArgumentPurser();		CommandLineArgument arg = purser.purse(args);		JobExecutor executor = new JobExecutor();		executor.setJobClass(arg.getOptionValue("jobClass"));		executor.setBaseDir(arg.getOptionValue("baseDir"));		executor.setPluginConfig(arg.getOptionValue("pluginConfig"));		executor.setLog(arg.getOptionValue("logClass"), arg.getOptionValue("logConfig"));		executor.run();	}	private String jobClass;	private String baseDir;	private String pluginConfig;	private String logClass;	private String logConfig;	public final void setJobClass(final String aClass) {		jobClass = aClass;	}	public final void setBaseDir(final String aDir) {		baseDir = aDir;	}	public final void setPluginConfig(final String aConfig) {		pluginConfig = aConfig;	}	public final void setLog(final String aClass, final String aConfig) {		logClass = aClass;		logConfig = aConfig;	}	public JobExecutor() {	}	public void run() {		Context context = null;		if (StringUtility.isNotEmpty(baseDir)) {			context = new JobContext(baseDir);		} else {			context = new JobContext();		}		// Load log		LoggerFactory.load(logClass, logConfig, context);		// Load job		Class<? extends Job> jobClazz = null;		Job job = null;		try {			jobClazz = (Class<? extends Job>) Class.forName(jobClass);			job = jobClazz.newInstance();		} catch (ClassNotFoundException ex) {			ex.printStackTrace();			return;		} catch (IllegalAccessException ex) {			ex.printStackTrace();			return;		} catch (InstantiationException ex) {			ex.printStackTrace();			return;		}		// Load plugin		try {			if (StringUtility.isNotEmpty(pluginConfig)) {				InputStream stream = context.getResourceAsStream(pluginConfig);				if (null != stream) {					PluginManager.initialize();					PluginManager.load(stream, context);				}			}		} catch (ConfigurationFormatException ex) {			ex.printStackTrace();			return;		} catch (PluginServiceException ex) {			ex.printStackTrace();			return;		} catch (IOException ex) {			ex.printStackTrace();			return;		}		try {			Property property = null;			PropertyFile propertyFile = jobClazz.getAnnotation(PropertyFile.class);			if (null != propertyFile) {				String value = propertyFile.value();				if (StringUtility.isNotEmpty(value)) {					property = PropertyManager.get(jobClazz);					if (null == property) {						property = PropertyManager.load(jobClazz, context);					}				}			}			if (job instanceof SessionSupport) {				((SessionSupport) job).setSession(new JobSessionStore());			}			if (job instanceof ContextSupport) {				((ContextSupport) job).setContext(context);			}			if (job instanceof PropertySupport) {				if (null != property) {					((PropertySupport) job).setProperty(property);				} else {					System.out.println("This job is not property file.[" + job.getClass().getName() + "]");				}			} else {				if (null != property) {					System.out.println("This job is not property support.[" + job.getClass().getName() + "]");				}			}			job.initialize();			job.execute(new Parameter());		} catch (JobServiceException ex) {			ex.printStackTrace();		} finally {			job.destroy();			PluginManager.destroy();		}	}}